// Code generated by Kitex v0.7.0. DO NOT EDIT.

package echo

import (
	"fmt"

	"github.com/apache/thrift/lib/go/thrift"

	hessian2 "github.com/kitex-contrib/codec-dubbo/pkg/hessian2"
	codec "github.com/kitex-contrib/codec-dubbo/pkg/iface"
	"github.com/pkg/errors"
)

// unused protection
var (
	_ = thrift.TProtocol(nil)
)

func (p *EchoRequest) Encode(e codec.Encoder) error {
	var err error
	err = e.Encode(p.Int32)
	if err != nil {
		return err
	}

	return nil
}

func (p *EchoRequest) Decode(d codec.Decoder) error {
	v, err := d.Decode()
	if err != nil {
		return err
	}
	err = hessian2.ReflectResponse(v, &p.Int32)
	if err != nil {
		return errors.Wrap(err, fmt.Sprintf("invalid data type: %T", v))
	}

	return nil
}

func (p *EchoRequest) JavaClassName() string {
	return "kitex.echo.EchoRequest"
}

func (p *EchoResponse) Encode(e codec.Encoder) error {
	var err error
	err = e.Encode(p.Int32)
	if err != nil {
		return err
	}

	return nil
}

func (p *EchoResponse) Decode(d codec.Decoder) error {
	v, err := d.Decode()
	if err != nil {
		return err
	}
	err = hessian2.ReflectResponse(v, &p.Int32)
	if err != nil {
		return errors.Wrap(err, fmt.Sprintf("invalid data type: %T", v))
	}

	return nil
}

func (p *EchoResponse) JavaClassName() string {
	return "kitex.echo.EchoResponse"
}

func (p *TestServiceEchoIntArgs) Encode(e codec.Encoder) error {
	var err error
	err = e.Encode(p.Req)
	if err != nil {
		return err
	}

	return nil
}

func (p *TestServiceEchoIntArgs) Decode(d codec.Decoder) error {
	v, err := d.Decode()
	if err != nil {
		return err
	}
	err = hessian2.ReflectResponse(v, &p.Req)
	if err != nil {
		return errors.Wrap(err, fmt.Sprintf("invalid data type: %T", v))
	}

	return nil
}

func (p *TestServiceEchoIntResult) Encode(e codec.Encoder) error {
	var err error
	err = e.Encode(p.Success)
	if err != nil {
		return err
	}

	return nil
}

func (p *TestServiceEchoIntResult) Decode(d codec.Decoder) error {
	v, err := d.Decode()
	if err != nil {
		return err
	}
	err = hessian2.ReflectResponse(v, &p.Success)
	if err != nil {
		return errors.Wrap(err, fmt.Sprintf("invalid data type: %T", v))
	}

	return nil
}

func (p *TestServiceEchoByteArgs) Encode(e codec.Encoder) error {
	var err error
	err = e.Encode(p.Req)
	if err != nil {
		return err
	}

	return nil
}

func (p *TestServiceEchoByteArgs) Decode(d codec.Decoder) error {
	v, err := d.Decode()
	if err != nil {
		return err
	}
	err = hessian2.ReflectResponse(v, &p.Req)
	if err != nil {
		return errors.Wrap(err, fmt.Sprintf("invalid data type: %T", v))
	}

	return nil
}

func (p *TestServiceEchoByteResult) Encode(e codec.Encoder) error {
	var err error
	err = e.Encode(p.Success)
	if err != nil {
		return err
	}

	return nil
}

func (p *TestServiceEchoByteResult) Decode(d codec.Decoder) error {
	v, err := d.Decode()
	if err != nil {
		return err
	}
	err = hessian2.ReflectResponse(v, &p.Success)
	if err != nil {
		return errors.Wrap(err, fmt.Sprintf("invalid data type: %T", v))
	}

	return nil
}

func (p *TestServiceEchoArgs) Encode(e codec.Encoder) error {
	var err error
	err = e.Encode(p.Req)
	if err != nil {
		return err
	}

	return nil
}

func (p *TestServiceEchoArgs) Decode(d codec.Decoder) error {
	v, err := d.Decode()
	if err != nil {
		return err
	}
	err = hessian2.ReflectResponse(v, &p.Req)
	if err != nil {
		return errors.Wrap(err, fmt.Sprintf("invalid data type: %T", v))
	}

	return nil
}

func (p *TestServiceEchoResult) Encode(e codec.Encoder) error {
	var err error
	err = e.Encode(p.Success)
	if err != nil {
		return err
	}

	return nil
}

func (p *TestServiceEchoResult) Decode(d codec.Decoder) error {
	v, err := d.Decode()
	if err != nil {
		return err
	}
	err = hessian2.ReflectResponse(v, &p.Success)
	if err != nil {
		return errors.Wrap(err, fmt.Sprintf("invalid data type: %T", v))
	}

	return nil
}

type TestServiceEchoIntArgs struct {
	Req int32 `thrift:"req,1" frugal:"1,default,i32" json:"req"`
}

func NewTestServiceEchoIntArgs() *TestServiceEchoIntArgs {
	return &TestServiceEchoIntArgs{}
}

func (p *TestServiceEchoIntArgs) GetReq() (v int32) {
	return p.Req
}
func (p *TestServiceEchoIntArgs) SetReq(val int32) {
	p.Req = val
}

func (p *TestServiceEchoIntArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoIntArgs(%+v)", *p)
}
func (p *TestServiceEchoIntArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoIntResult struct {
	Success *int32 `thrift:"success,0,optional" frugal:"0,optional,i32" json:"success,omitempty"`
}

func NewTestServiceEchoIntResult() *TestServiceEchoIntResult {
	return &TestServiceEchoIntResult{}
}

var TestServiceEchoIntResult_Success_DEFAULT int32

func (p *TestServiceEchoIntResult) GetSuccess() (v int32) {
	if !p.IsSetSuccess() {
		return TestServiceEchoIntResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoIntResult) SetSuccess(x interface{}) {
	p.Success = x.(*int32)
}

func (p *TestServiceEchoIntResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoIntResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoIntResult(%+v)", *p)
}
func (p *TestServiceEchoIntResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoByteArgs struct {
	Req int8 `thrift:"req,1" frugal:"1,default,byte" json:"req"`
}

func NewTestServiceEchoByteArgs() *TestServiceEchoByteArgs {
	return &TestServiceEchoByteArgs{}
}

func (p *TestServiceEchoByteArgs) GetReq() (v int8) {
	return p.Req
}
func (p *TestServiceEchoByteArgs) SetReq(val int8) {
	p.Req = val
}

func (p *TestServiceEchoByteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoByteArgs(%+v)", *p)
}
func (p *TestServiceEchoByteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoByteResult struct {
	Success *int8 `thrift:"success,0,optional" frugal:"0,optional,byte" json:"success,omitempty"`
}

func NewTestServiceEchoByteResult() *TestServiceEchoByteResult {
	return &TestServiceEchoByteResult{}
}

var TestServiceEchoByteResult_Success_DEFAULT int8

func (p *TestServiceEchoByteResult) GetSuccess() (v int8) {
	if !p.IsSetSuccess() {
		return TestServiceEchoByteResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoByteResult) SetSuccess(x interface{}) {
	p.Success = x.(*int8)
}

func (p *TestServiceEchoByteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoByteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoByteResult(%+v)", *p)
}
func (p *TestServiceEchoByteResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoArgs struct {
	Req *EchoRequest `thrift:"req,1" frugal:"1,default,EchoRequest" json:"req"`
}

func NewTestServiceEchoArgs() *TestServiceEchoArgs {
	return &TestServiceEchoArgs{}
}

var TestServiceEchoArgs_Req_DEFAULT *EchoRequest

func (p *TestServiceEchoArgs) GetReq() (v *EchoRequest) {
	if !p.IsSetReq() {
		return TestServiceEchoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TestServiceEchoArgs) SetReq(val *EchoRequest) {
	p.Req = val
}

func (p *TestServiceEchoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestServiceEchoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoArgs(%+v)", *p)
}
func (p *TestServiceEchoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewTestServiceEchoResult() *TestServiceEchoResult {
	return &TestServiceEchoResult{}
}

var TestServiceEchoResult_Success_DEFAULT *EchoResponse

func (p *TestServiceEchoResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *TestServiceEchoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoResult(%+v)", *p)
}
func (p *TestServiceEchoResult) GetResult() interface{} {
	return p.Success
}
