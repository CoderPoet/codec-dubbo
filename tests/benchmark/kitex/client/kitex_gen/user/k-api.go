// Code generated by Kitex v0.7.1. DO NOT EDIT.

package user

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"

	"github.com/kitex-contrib/codec-dubbo/pkg/hessian2"
	codec "github.com/kitex-contrib/codec-dubbo/pkg/iface"
	"github.com/pkg/errors"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.TProtocol(nil)
)

type BenchmarkServiceGetUserArgs struct {
	Req *Request `thrift:"req,1" frugal:"1,default,Request" json:"req"`
}

func NewBenchmarkServiceGetUserArgs() *BenchmarkServiceGetUserArgs {
	return &BenchmarkServiceGetUserArgs{}
}

func (p *BenchmarkServiceGetUserArgs) InitDefault() {
	*p = BenchmarkServiceGetUserArgs{}
}

var BenchmarkServiceGetUserArgs_Req_DEFAULT *Request

func (p *BenchmarkServiceGetUserArgs) GetReq() (v *Request) {
	if !p.IsSetReq() {
		return BenchmarkServiceGetUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BenchmarkServiceGetUserArgs) SetReq(val *Request) {
	p.Req = val
}

func (p *BenchmarkServiceGetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BenchmarkServiceGetUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BenchmarkServiceGetUserArgs(%+v)", *p)
}
func (p *BenchmarkServiceGetUserArgs) GetFirstArgument() interface{} {
	return p.Req
}
func (p *BenchmarkServiceGetUserArgs) Encode(e codec.Encoder) error {
	var err error
	err = e.Encode(p.Req)
	if err != nil {
		return err
	}

	return nil
}

func (p *BenchmarkServiceGetUserArgs) Decode(d codec.Decoder) error {
	var (
		err error
		v   interface{}
	)
	v, err = d.Decode()
	if err != nil {
		return err
	}
	err = hessian2.ReflectResponse(v, &p.Req)
	if err != nil {
		return errors.Wrap(err, fmt.Sprintf("invalid data type: %T", v))
	}

	return nil
}

type BenchmarkServiceGetUserResult struct {
	Success *User `thrift:"success,0,optional" frugal:"0,optional,User" json:"success,omitempty"`
}

func NewBenchmarkServiceGetUserResult() *BenchmarkServiceGetUserResult {
	return &BenchmarkServiceGetUserResult{}
}

func (p *BenchmarkServiceGetUserResult) InitDefault() {
	*p = BenchmarkServiceGetUserResult{}
}

var BenchmarkServiceGetUserResult_Success_DEFAULT *User

func (p *BenchmarkServiceGetUserResult) GetSuccess() (v *User) {
	if !p.IsSetSuccess() {
		return BenchmarkServiceGetUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BenchmarkServiceGetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*User)
}

func (p *BenchmarkServiceGetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BenchmarkServiceGetUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BenchmarkServiceGetUserResult(%+v)", *p)
}
func (p *BenchmarkServiceGetUserResult) GetResult() interface{} {
	return p.Success
}
func (p *BenchmarkServiceGetUserResult) Encode(e codec.Encoder) error {
	var err error
	err = e.Encode(p.Success)
	if err != nil {
		return err
	}

	return nil
}

func (p *BenchmarkServiceGetUserResult) Decode(d codec.Decoder) error {
	var (
		err error
		v   interface{}
	)
	v, err = d.Decode()
	if err != nil {
		return err
	}
	err = hessian2.ReflectResponse(v, &p.Success)
	if err != nil {
		return errors.Wrap(err, fmt.Sprintf("invalid data type: %T", v))
	}

	return nil
}
